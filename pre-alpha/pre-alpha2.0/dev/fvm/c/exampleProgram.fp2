/*
Copyright Â© 2018, Robert Gollagher.
SPDX-License-Identifier: GPL-3.0+

Program:    exampleProgram.fp2
Author :    Robert Gollagher   robert.gollagher@freeputer.net
Created:    20180503
Updated:    20180511+
Version:    pre-alpha-0.0.0.13+ for FVM 2.0

This is an example program using the 'fvm2.c' virtual machine definition.

This source is preprocessed with sed followed by m4 to produce the C source.

Thus to build it do:

  sed -r 's/([z][0-9a-f]+)\.([x][0-9a-f]+)/\1(\2)/g' \
  <exampleProgram.fp2 >exampleProgram.m4 \
  && m4 -d exampleProgram.m4 > exampleProgram.c

Or simply:

  ./build.sh exampleProgram

The resulting 'exampleProgram.c' should never be modified by hand.
It is currently included in 'fvm2.c' which you can then build and run by:

  make good OBJ=fvm2
  time ./fvm2; echo $?

Or to build and run simply:

  ./go.sh exampleProgram

If you wish to examine the output of the C preprocessor you can do:

  gcc -E fvm2.c

Template for modules:

// ---------------------------------------------------------------------------
  as()
  module()
    unit
      PUB(,):
        done
    endun
  endmod

==============================================================================
 WARNING: This is pre-alpha software and as such may well be incomplete,
 unstable and unreliable. It is considered to be suitable only for
 experimentation and nothing more.
============================================================================*/
// m4: include(`fpx.m4')
tron
launch

// ---------------------------------------------------------------------------
  as(m1)
  module(st)
  // st: Stack Operations.
    atom
      PUB(x1,nip):
      // (n1 n2)(n1)
        swap
        drop
        done
    enda
    atom
      PUB(x2,drop2):
      // (n1 n2)()
        drop
        drop
        done
    enda
  endm
// ---------------------------------------------------------------------------
  as(m3)
  module(co)
  // co: Constants.
    atom
      PUB(x1,nan):
        // ()(nan)
        i(0x0)
        flip
        done
    enda
    atom
      PUB(x2,true):
        // ()(0x1)
        i(0x1)
        done
    enda
    atom
      PUB(x3,false):
        // ()(0x0)
        i(0x0)
        done
    enda
  endm

// ---------------------------------------------------------------------------
  as(m2)
  use(z1,m3,co)
  module(ch)
  // ch: Character Operations.
  //  These act on whole words.
  //  These treat NaN As a character.
    atom
      PUB(x1,eq):
        // (n1 n2)(bool) equality
        jmpe(z1.x2,true)
        jump(z1.x3,false)
    enda
  endm

// ---------------------------------------------------------------------------
  as(m0)
  use(z1,m1,st)
  use(z2,m2,ch)
  use(z3,m3,co)
  module(main)
    unit
      PUB(x0,run):
        do(z3.x1,nan)
        do(z3.x1,nan)
        do(z2.x1,eq)
        halt
    endu
  endm
