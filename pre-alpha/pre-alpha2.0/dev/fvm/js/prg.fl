(
prg
===

This is an unstable Freelang program being used for iterative experimentation
in the development of the JavaScript prototype of the FVM 2.0.

It can be compiled by...

  ./mk.sh prg.fl

...to produce 'prgBase64.js' for use by 'fvmui.html'.

Copyright Â© 2017, Robert Gollagher.
SPDX-License-Identifier: GPL-3.0+

Program:    prg.fl
Author :    Robert Gollagher   robert.gollagher@freeputer.net
Created:    20170513
Updated:    20170525-2018+
Version:    unstable

===========================================================================

WARNING: This is pre-alpha software and as such may well be incomplete,
unstable and unreliable. It is considered to be suitable only for
experimentation and nothing more.

===========================================================================

NOTES

Syntax for compiler directive which declares the current failure address
for branch on failure is simply to surround the failure address
with <> as follows. This is entirely compile-time logic:

  <:bad>          \ a back-reference to a previous label
  <1024>          \ a literal PRG cell number
  <:>              \ revert to previous failure address

The default is <0> if no failure address is ever declared. This could
potentially cause a faulty program to endlessly restart itself, so it is
wise to always declare a sensible failure address. A failure-address
declaration applies until the compiler encounters another such
declaration. This is compile-time logic not runtime logic.

All other compiler directives in future shall be surrounded by <<>> and
there is currently only one of these, namely slotFloor:

  <<slotFloor>>   \ formerly was simply slotFloor rather than <<slotFloor>>

=========================================================================== )
<<slotFloor>> 16777216 INT_MAX. 2147483647 NIM. -2147483648 ERR. 1 OK. 0

( TODO:

)

<2> go :run fail 0

    run:
      prg{run} halt 0

prg{
  
  fret: fret 0
  <:fret> : run + 0 ; ( calc 0 ; 0 )
  ( <:fret> : calc 3 5 + 0 ; 0
  <:fret_risk> : add + 0 ; 0 )

}prg


